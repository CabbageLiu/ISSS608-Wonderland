{
  "hash": "b0bffef1ff4a771340afadb4c857ed39",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"MC1\"\nauthor: \"Liu Chih Yuan\"\ndate: \"May 17, 2025\"\ndate-modified: \"last-modified\"\nformat: html\nexecute: \n  eval: true        # run code \n  echo: true         # show code \n  warning: false     #warning msg wont come out\n  freeze: true      #speed up rendering time\n---\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph)\n```\n:::\n\n\n\n## Import\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkg <- fromJSON(\"data/MC1_release/MC1_graph.json\")\n```\n:::\n\n\n\n## Inspect Structure\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(kg, max.level=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame':\t17412 obs. of  10 variables:\n $ links     :'data.frame':\t37857 obs. of  4 variables:\n```\n\n\n:::\n:::\n\n\n\n## Extract and Inspect\n\nthis is like extracting part of the data\n\nwe used to have to go into `kg` -\\> `nodes` -\\> `table`, now we can just click on `edges_tbl`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes_tbl <- as_tibble(kg$nodes)\nedges_tbl <- as_tibble(kg$links)\n```\n:::\n\n\n\n## Initial EDA\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = edges_tbl,\n       aes(y = `Edge Type`)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](MC1_InClass_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = nodes_tbl,\n       aes(y = `Node Type`)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](MC1_InClass_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n## Creating knowledge graph\n\n### Step 1. Mapping from node id to row index\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nid_map <- tibble(id = nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)))\n```\n:::\n\n\n\nThis ensures each id from your node list is mapped to the correct row number\n\n### Step 2. Map source and target IDs to row indices\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedges_tbl <- edges_tbl %>%\n  left_join(id_map, by = c(\"source\" = \"id\")) %>%\n  rename(from = index) %>%\n  left_join(id_map, by = c(\"target\" = \"id\")) %>%\n  rename(to = index)\n```\n:::\n\n\n\n### Step 3. Filter out any unmatched (invalid) edges\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedges_tbl <- edges_tbl %>%\n  filter(!is.na(from), !is.na(to))\n```\n:::\n\n\n\n### Step 4. Creating the graph\n\nLastly, `tbl_graph()` is used to create tidygraph graph object by using the code chunk below\n\nwe can also tweak `directed` as True\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph <- tbl_graph(nodes = nodes_tbl,\n                   edges = edges_tbl,\n                   directed = kg$directed)\n```\n:::\n\n\n\n## Visualizing the knowledge graph\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n```\n:::\n\n\n\n### 2.1 Visualizing the whole graph\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n```\n:::\n\n\n\nDoesn't really show meanings, so we move on to subgraph\n\n### 2.2 Step 1 Filter edges to only \"Memberof\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph_memberof <- graph %>%\n  activate(edges) %>%\n  filter(`Edge Type` == \"Memberof\")\n```\n:::\n\n\n\n### 2.2 Step 2 Extract only connected nodes (eg. used in these edges)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nused_node_indicies <- graph_memberof %>%\n  activate(edges) %>%\n  as_tibble() %>%\n  select(from, to) %>%\n  unlist() %>%\n  unique()\n```\n:::\n\n\n\n### 2.3 Step 3 Keep only the nodes\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph_memberof <- graph_memberof %>%\n  activate(nodes) %>%\n  mutate(row_id = row_number()) %>%\n  filter(row_id %in% used_node_indicies) %>%\n  select(-row_id)\n```\n:::\n\n\n\n### 2.4 Plot sub-graph\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(graph_memberof,\n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.5,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 1) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.25) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](MC1_InClass_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "MC1_InClass_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}