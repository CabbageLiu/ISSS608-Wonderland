---
title: "MC1"
author: "Liu Chih Yuan"
date: "May 17, 2025"
date-modified: "last-modified"
format: html
execute: 
  eval: true        # run code 
  echo: true         # show code 
  warning: false     #warning msg wont come out
  freeze: true      #speed up rendering time
---

```{r}
pacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph)
```

## Import

```{r}
kg <- fromJSON("data/MC1_release/MC1_graph.json")
```

## Inspect Structure

```{r}
str(kg, max.level=1)
```

## Extract and Inspect

this is like extracting part of the data

we used to have to go into `kg` -\> `nodes` -\> `table`, now we can just click on `edges_tbl`

```{r}
nodes_tbl <- as_tibble(kg$nodes)
edges_tbl <- as_tibble(kg$links)
```

## Initial EDA

```{r}
ggplot(data = edges_tbl,
       aes(y = `Edge Type`)) +
  geom_bar()
```

```{r}
ggplot(data = nodes_tbl,
       aes(y = `Node Type`)) +
  geom_bar()
```

## Creating knowledge graph

### Step 1. Mapping from node id to row index

```{r}
id_map <- tibble(id = nodes_tbl$id,
                 index = seq_len(
                   nrow(nodes_tbl)))
```

This ensures each id from your node list is mapped to the correct row number

### Step 2. Map source and target IDs to row indices

```{r}
edges_tbl <- edges_tbl %>%
  left_join(id_map, by = c("source" = "id")) %>%
  rename(from = index) %>%
  left_join(id_map, by = c("target" = "id")) %>%
  rename(to = index)
```

### Step 3. Filter out any unmatched (invalid) edges

```{r}
edges_tbl <- edges_tbl %>%
  filter(!is.na(from), !is.na(to))
```

### Step 4. Creating the graph

Lastly, `tbl_graph()` is used to create tidygraph graph object by using the code chunk below

we can also tweak `directed` as True

```{r}
graph <- tbl_graph(nodes = nodes_tbl,
                   edges = edges_tbl,
                   directed = kg$directed)
```

## Visualizing the knowledge graph

```{r}
set.seed(1234)
```

### 2.1 Visualizing the whole graph

```{r}
#| eval: false
ggraph(graph, layout = "fr") +
  geom_edge_link(alpha = 0.3,
                 colour = "gray") +
  geom_node_point(aes(color = `Node Type`),
                  size = 4) +
  geom_node_text(aes(label = name),
                 repel = TRUE,
                 size = 2.5) +
  theme_void()
```

Doesn't really show meanings, so we move on to subgraph

### 2.2 Step 1 Filter edges to only "Memberof"

```{r}
graph_memberof <- graph %>%
  activate(edges) %>%
  filter(`Edge Type` == "Memberof")
```

### 2.2 Step 2 Extract only connected nodes (eg. used in these edges)

```{r}
used_node_indicies <- graph_memberof %>%
  activate(edges) %>%
  as_tibble() %>%
  select(from, to) %>%
  unlist() %>%
  unique()
```

### 2.3 Step 3 Keep only the nodes

```{r}
graph_memberof <- graph_memberof %>%
  activate(nodes) %>%
  mutate(row_id = row_number()) %>%
  filter(row_id %in% used_node_indicies) %>%
  select(-row_id)
```

### 2.4 Plot sub-graph

```{r}
ggraph(graph_memberof,
       layout = "fr") +
  geom_edge_link(alpha = 0.5,
                 colour = "gray") +
  geom_node_point(aes(color = `Node Type`),
                  size = 1) +
  geom_node_text(aes(label = name),
                 repel = TRUE,
                 size = 2.25) +
  theme_void()
```
