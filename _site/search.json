[
  {
    "objectID": "Session_notes/session_notes1.html",
    "href": "Session_notes/session_notes1.html",
    "title": "Session Note Week 1",
    "section": "",
    "text": "Session notes will be documenting the notes and learning points made during the hands-on exercise\n\n\n.qmd (Quarto Markdown): for content, dashboards\n.yml (Config/settings): metadata, layouts, options\nUse for maintain all the deliverables (eg. projects & exercise)\n\n\n\nWhen you make changes of your qmd / yml it will be first shown in git\nUsual changes: save (either qmd / yml) -&gt; render (note this changes locally only)\nTo upload to GitHub, we have to “push” the files\n\nPress Git on top right block\nSelect all files\nCommit and leave comment eg. commit after adding a cabbage image\nPress Push\nCheck on your GitHub see if uploaded\n\n\n\nPush Rejected: your local brand was “behind” the remote\n\nThis happens when:\n\nCreated a new repo on GitHub, it auto generates a README, LICENSE etc\nWhen you try to push without pulling those remote changer first\nLocal version doesn’t know about those remote commits so it says: do a git pull first to sync then can push\n\n\n\n\n\nHow Git Pull & Push works\n\nPull: download files from GitHub -&gt; your local\nPush: send files from local -&gt; GitHub\n\nHow to avoid this error\n\nDon’t initialize with README etc\nIf did so, always Pull before you Push",
    "crumbs": [
      "Home",
      "Session Notes",
      "Session 1"
    ]
  },
  {
    "objectID": "Session_notes/session_notes1.html#quarto",
    "href": "Session_notes/session_notes1.html#quarto",
    "title": "Session Note Week 1",
    "section": "",
    "text": ".qmd (Quarto Markdown): for content, dashboards\n.yml (Config/settings): metadata, layouts, options\nUse for maintain all the deliverables (eg. projects & exercise)\n\n\n\nWhen you make changes of your qmd / yml it will be first shown in git\nUsual changes: save (either qmd / yml) -&gt; render (note this changes locally only)\nTo upload to GitHub, we have to “push” the files\n\nPress Git on top right block\nSelect all files\nCommit and leave comment eg. commit after adding a cabbage image\nPress Push\nCheck on your GitHub see if uploaded\n\n\n\nPush Rejected: your local brand was “behind” the remote\n\nThis happens when:\n\nCreated a new repo on GitHub, it auto generates a README, LICENSE etc\nWhen you try to push without pulling those remote changer first\nLocal version doesn’t know about those remote commits so it says: do a git pull first to sync then can push\n\n\n\n\n\nHow Git Pull & Push works\n\nPull: download files from GitHub -&gt; your local\nPush: send files from local -&gt; GitHub\n\nHow to avoid this error\n\nDon’t initialize with README etc\nIf did so, always Pull before you Push",
    "crumbs": [
      "Home",
      "Session Notes",
      "Session 1"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on_Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in this computer. If they are, then they will be launched into R.\nPacman is like a package manager, Tidyverse are packages for data science eg. plotting, wrangling, cleaning, visualization etc\n\npacman::p_load(tidyverse)\n\n\n\n\nNote if you did not run the first code chunk tidyverse, this will indicate not found. read_csv is a code from tidyverse\nLooks very much like what we are doing in Pandas pd.read()\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Exercise 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "Hands-on_Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in this computer. If they are, then they will be launched into R.\nPacman is like a package manager, Tidyverse are packages for data science eg. plotting, wrangling, cleaning, visualization etc\n\npacman::p_load(tidyverse)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Exercise 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on_Exercise 1",
    "section": "",
    "text": "Note if you did not run the first code chunk tidyverse, this will indicate not found. read_csv is a code from tidyverse\nLooks very much like what we are doing in Pandas pd.read()\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Exercise 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "By using gganimate and plotly r packages, we can create animated data visualization. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon.\n\n\n\n\nAnimated graphs are nice, but it does not apply to all use cases. If you are conducting EDA, animated graphs might not be worth the time. But if you are giving a presentation, a few well-placed animated graphs can help audience better understand the topic and figures\n\nFrame: in a animated graph, each frame represents a different point in time or category, when the frame changes the data points on graph are updates as well\nAnimation Attributes: settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\nreadxl makes it easy to get data out from Excel into R\nplotly library for plotting interactive statistical graphics\ngganimate ggplot extension for creating animated statistical graphs\ngifski converts video frames to GIF animations\ngapminder An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse a set of modern R packages for data science, analytics etc\n\n\npacman::p_load( readxl, plotly, gganimate, gifski, gapminder, tidyverse)\n\n\n\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\nnote the %&gt;% means “take the result of the previous step and pass to the next function” it is a pipe operator\n\nInstead of using mutate_at(), across() can be used to derive the same outputs\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position=‘none’) should be used as shown in the plot and code chunk below.\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Exercise 3 Part 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#concepts",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#concepts",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "When creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Exercise 3 Part 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#terminology",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#terminology",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "Animated graphs are nice, but it does not apply to all use cases. If you are conducting EDA, animated graphs might not be worth the time. But if you are giving a presentation, a few well-placed animated graphs can help audience better understand the topic and figures\n\nFrame: in a animated graph, each frame represents a different point in time or category, when the frame changes the data points on graph are updates as well\nAnimation Attributes: settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Exercise 3 Part 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#loading-the-packages",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "readxl makes it easy to get data out from Excel into R\nplotly library for plotting interactive statistical graphics\ngganimate ggplot extension for creating animated statistical graphs\ngifski converts video frames to GIF animations\ngapminder An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse a set of modern R packages for data science, analytics etc\n\n\npacman::p_load( readxl, plotly, gganimate, gifski, gapminder, tidyverse)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Exercise 3 Part 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#importing-data",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "col &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\nnote the %&gt;% means “take the result of the previous step and pass to the next function” it is a pipe operator\n\nInstead of using mutate_at(), across() can be used to derive the same outputs\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Exercise 3 Part 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#gganimate-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03_2.html#gganimate-method",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "gganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position=‘none’) should be used as shown in the plot and code chunk below.\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Exercise 3 Part 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html",
    "title": "Hands On Exercise 4: Visualizing Distribution",
    "section": "",
    "text": "Here we will be introducing two new statistical graphic methods to visualize distribution, which are ridgeline plot and raincloud plot by using ggplot2 and its extensions",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Exercise 4 Part 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html#loading-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html#loading-packages",
    "title": "Hands On Exercise 4: Visualizing Distribution",
    "section": "Loading Packages",
    "text": "Loading Packages\n\npacman::p_load(ggdist, ggridges, tidyverse, ggthemes, colorspace)\n\nggdist: ggplot2 extension for visualizing distribution and uncertainty\nggridges: ggplot2 extension for plotting ridgeline plots\ncolorspace: R package providing a broad toolbox for selecting individual colors or color palettes, can play with the color",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Exercise 4 Part 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html#data-import",
    "title": "Hands On Exercise 4: Visualizing Distribution",
    "section": "Data Import",
    "text": "Data Import\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Exercise 4 Part 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html#visualizing-distribution-with-ridgeline-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html#visualizing-distribution-with-ridgeline-plot",
    "title": "Hands On Exercise 4: Visualizing Distribution",
    "section": "Visualizing Distribution with Ridgeline Plot",
    "text": "Visualizing Distribution with Ridgeline Plot\nRidgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\n\nggridges method\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\nVarying fill colors along the x axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\nMapping the probabilities directly onto color\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\nRidgeline plots with quantile lines\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Exercise 4 Part 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html#visualizing-distribution-with-raincloud-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04_1.html#visualizing-distribution-with-raincloud-plot",
    "title": "Hands On Exercise 4: Visualizing Distribution",
    "section": "Visualizing Distribution with Raincloud Plot",
    "text": "Visualizing Distribution with Raincloud Plot\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\nIn this section, you will learn how to create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.\n\nPlotting a Half Eye graph\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n\n\nAdding boxplot with geom_boxplot()\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\n\n\n\nAdding the Dot Plots with stat_dots()\nNext, we will add the third geometry layer using stat_dots()of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n\n\n\nFinishing touches\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Exercise 4 Part 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "ggiraph making ’ggplot graphics interactive\nplotly library for plotting interactive statistical graphs\nDT R interface to the JavaScript library\nDataTables create interactive table on html page\ntidyverse set of modern R packages for support data science, analysis and communication task eg. create static statistical graphs\npatchwork for combining multiple ggplot2 graphs into one figure\n\n\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nggiraph is an htmlwidget and a ggplot2 extension, allowing graphs to be interactive\nThe main three elements:\n\nTooltip: when hover over data with mouse, displays info\nOnclick: column of dataset contain a JavaScript function to be executed when clicked\nData_id: column of dataset contain an id to be associated with elements\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nBy hovering over the data points displays which student it is\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\nWe can also choose to display more data, the first 3 line of code create a new field called tooltip and reused on code line 7\n\n\n\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)\n\n\n\n\n\n\n\n\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\nThis is the second interactive feature of ggiraph: data_id\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618\n)                                        \n\n\n\n\n\nNote that the default value (color) of the hover css is hover_css = \"fill:orange\"\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n\nBascially goes to the URL when click\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\n\n\n\nWe can also link up graphs to provide a holistic view of how the data interact\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\n\n\n\n\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and custom interface to the (MIT-licensed) JavaScript library plotly.js\nThere are 2 ways to create interactive graph by using plotly:\n\nusing plot_ly()\nusing ggplotly()\n\n\n\n\nplot_ly(data = exam_data,\n             x = ~MATHS,\n             y = ~ENGLISH)\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -&gt; https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data,\n             x = ~ENGLISH,\n             y= ~MATHS,\n             color = ~RACE)\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -&gt; https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\nThree steps:\n\nhighlight_key() of plotly package is used to share data\ntwo scatterplots created by using ggplot2 functions\nsubplot() of plotly is used to place them side-by-side\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\n\n\n\ncrosstalk is an add-on to the htmlwidgets package, with set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering)\n\n\nDT package is a wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JS library DataTables (usually via R Markdown or Shiny)\n\nDT::datatable(exam_data, class = \"compact\")\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\nSetting the `off` event (i.e., 'plotly_deselect') to match the `on` event (i.e., 'plotly_selected'). You can change this default via the `highlight()` function.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhighlight() is a function of plotly which sets a variety of options for brushing\nbscols() is a helper function of crosstalk package, making it easy to put HTML elements side by side",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Exercise 3 Part 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#loading-the-packages",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "ggiraph making ’ggplot graphics interactive\nplotly library for plotting interactive statistical graphs\nDT R interface to the JavaScript library\nDataTables create interactive table on html page\ntidyverse set of modern R packages for support data science, analysis and communication task eg. create static statistical graphs\npatchwork for combining multiple ggplot2 graphs into one figure\n\n\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Exercise 3 Part 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-the-data",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Exercise 3 Part 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualization---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualization---ggiraph-methods",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "ggiraph is an htmlwidget and a ggplot2 extension, allowing graphs to be interactive\nThe main three elements:\n\nTooltip: when hover over data with mouse, displays info\nOnclick: column of dataset contain a JavaScript function to be executed when clicked\nData_id: column of dataset contain an id to be associated with elements\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nBy hovering over the data points displays which student it is\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\nWe can also choose to display more data, the first 3 line of code create a new field called tooltip and reused on code line 7\n\n\n\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)\n\n\n\n\n\n\n\n\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\nThis is the second interactive feature of ggiraph: data_id\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618\n)                                        \n\n\n\n\n\nNote that the default value (color) of the hover css is hover_css = \"fill:orange\"\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n\nBascially goes to the URL when click\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\n\n\n\nWe can also link up graphs to provide a holistic view of how the data interact\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Exercise 3 Part 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualization-plotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-visualization-plotly-method",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "Plotly’s R graphing library create interactive web graphics from ggplot2 graphs and custom interface to the (MIT-licensed) JavaScript library plotly.js\nThere are 2 ways to create interactive graph by using plotly:\n\nusing plot_ly()\nusing ggplotly()\n\n\n\n\nplot_ly(data = exam_data,\n             x = ~MATHS,\n             y = ~ENGLISH)\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -&gt; https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data,\n             x = ~ENGLISH,\n             y= ~MATHS,\n             color = ~RACE)\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -&gt; https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\nThree steps:\n\nhighlight_key() of plotly package is used to share data\ntwo scatterplots created by using ggplot2 functions\nsubplot() of plotly is used to place them side-by-side\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Exercise 3 Part 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#crosstalk-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#crosstalk-method",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "crosstalk is an add-on to the htmlwidgets package, with set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering)\n\n\nDT package is a wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JS library DataTables (usually via R Markdown or Shiny)\n\nDT::datatable(exam_data, class = \"compact\")\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\nSetting the `off` event (i.e., 'plotly_deselect') to match the `on` event (i.e., 'plotly_selected'). You can change this default via the `highlight()` function.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhighlight() is a function of plotly which sets a variety of options for brushing\nbscols() is a helper function of crosstalk package, making it easy to put HTML elements side by side",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Exercise 3 Part 1"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "ggplot2 extensions for better statistical graphs\n\n\n\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse) \n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n*always remember to load package first or else won’t execute properly! Here we can see the dataset consists of: 1. Categorical attributes: ID, CLASS, GENDER, RACE 2. Continuous attributes: MATHS, ENGLISH, SCIENCE\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nWhen plotting large datasets, annotation tends to become quite tedious as shown on the graph above\n\n\n\n\nggrepel is an extension of ggplot2 to repel overlapping texts\nSimply replace geom_text() with geom_text_repel() and geom_label() with geom_label_repel() as shown below\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: ggrepel: 317 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKey Takeaways: ggthemes vs hrbrthemes\n\n\n\n\nggthemes provides preset themes that mimic well-known publications like The Economist, WSJ, etc.\nIt’s great for quickly applying a distinct professional style to your plots.\nhrbrthemes focuses on typography and readability, using carefully chosen fonts, spacing, and alignment.\nBest for presentation-quality plots with clean and modern text aesthetics.\n\n\n\nggplot2 comes with 8 themes pre-installed in the package, theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void()\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\nNothing wrong with this, but we can make it more interesting\n\n\nggtheme consists of themes replicating the plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, Stata, Excel, and The Wall Street Journal Here are some showcases: #### The Economist\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_stata()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_wsj()\n\n\n\n\n\n\n\n\n\n\n\n\nhrbthems extension provides base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\nWe can also change the font size of the titles\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\nChanges made:\n1. axis_title_size used to increase font size of axis title to 18\n2. base_size used to increase the default axis to 15\n3. grid used to remove the x-axis grid lines\n\n\n\n\nIt is commonly seen in real world use cases that we have to combine multiple graphs to tell a compelling visual story. Here we create 3 statistical graphs first\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\nLastly, we create scatterplot for English score vs Math score\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\npatchwork is designed for combining separate ggplot2 graphs into single figure\n\n\n\n\n\n\nPatchwork Layout Syntax Cheatsheet\n\n\n\n\nUse + for a two-column layout (side by side).\nUse () to create a subplot group.\nUse / for a two-row layout (stacked vertically).\n\n\nPatchwork makes arranging ggplots intuitive with simple math-like syntax. :::\n\n\n\n\n\n*refer back to the 3 graphs we have labelled them as p1 p2 p3\nTo combine simply ‘p1 + p2’\n\np1 + p2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPatchwork Composite Plot Operators\n\n\n\n\nUse / to stack two ggplot2 graphs vertically.\nUse | to place plots side by side.\nUse () to group plots and control the sequence of layout.\n\n\nCombine these operators to build complex composite figures easily with the patchwork package.\n\n\n\n\n(p1 / p2) | p3\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\nWith insert_element() of pathwork, we can place graphs within a plot\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\nHere we composite 3 graphs together and use The Economist theme\n\n\n`geom_smooth()` using formula = 'y ~ x'",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#objective",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#objective",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "ggplot2 extensions for better statistical graphs",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#loading-the-packages",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "pacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reading-the-csv-file",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reading-the-csv-file",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n*always remember to load package first or else won’t execute properly! Here we can see the dataset consists of: 1. Categorical attributes: ID, CLASS, GENDER, RACE 2. Continuous attributes: MATHS, ENGLISH, SCIENCE",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#ggrepel-annotation",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#ggrepel-annotation",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "ggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nWhen plotting large datasets, annotation tends to become quite tedious as shown on the graph above\n\n\n\n\nggrepel is an extension of ggplot2 to repel overlapping texts\nSimply replace geom_text() with geom_text_repel() and geom_label() with geom_label_repel() as shown below\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: ggrepel: 317 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#ggthemes-hrbthems-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#ggthemes-hrbthems-themes",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "Key Takeaways: ggthemes vs hrbrthemes\n\n\n\n\nggthemes provides preset themes that mimic well-known publications like The Economist, WSJ, etc.\nIt’s great for quickly applying a distinct professional style to your plots.\nhrbrthemes focuses on typography and readability, using carefully chosen fonts, spacing, and alignment.\nBest for presentation-quality plots with clean and modern text aesthetics.\n\n\n\nggplot2 comes with 8 themes pre-installed in the package, theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void()\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\nNothing wrong with this, but we can make it more interesting\n\n\nggtheme consists of themes replicating the plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, Stata, Excel, and The Wall Street Journal Here are some showcases: #### The Economist\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_stata()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_wsj()\n\n\n\n\n\n\n\n\n\n\n\n\nhrbthems extension provides base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\nWe can also change the font size of the titles\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\nChanges made:\n1. axis_title_size used to increase font size of axis title to 18\n2. base_size used to increase the default axis to 15\n3. grid used to remove the x-axis grid lines",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Exercise 2"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#composing-with-multiple-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#composing-with-multiple-graphs",
    "title": "Hands-on_Ex02",
    "section": "",
    "text": "It is commonly seen in real world use cases that we have to combine multiple graphs to tell a compelling visual story. Here we create 3 statistical graphs first\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\nLastly, we create scatterplot for English score vs Math score\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\npatchwork is designed for combining separate ggplot2 graphs into single figure\n\n\n\n\n\n\nPatchwork Layout Syntax Cheatsheet\n\n\n\n\nUse + for a two-column layout (side by side).\nUse () to create a subplot group.\nUse / for a two-row layout (stacked vertically).\n\n\nPatchwork makes arranging ggplots intuitive with simple math-like syntax. :::\n\n\n\n\n\n*refer back to the 3 graphs we have labelled them as p1 p2 p3\nTo combine simply ‘p1 + p2’\n\np1 + p2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPatchwork Composite Plot Operators\n\n\n\n\nUse / to stack two ggplot2 graphs vertically.\nUse | to place plots side by side.\nUse () to group plots and control the sequence of layout.\n\n\nCombine these operators to build complex composite figures easily with the patchwork package.\n\n\n\n\n(p1 / p2) | p3\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\nWith insert_element() of pathwork, we can place graphs within a plot\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\nHere we composite 3 graphs together and use The Economist theme\n\n\n`geom_smooth()` using formula = 'y ~ x'",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Exercise 2"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-Liu Chih Yuan",
    "section": "",
    "text": "by Liu Chih Yuan\nThis page is dedicated for documenting work exercises and notes for ISSS608 Visual Analytics\n\nFun Fact: Cabbages are veggies\n\n\n\nTake Home Ex01 added"
  },
  {
    "objectID": "index.html#latest-update",
    "href": "index.html#latest-update",
    "title": "ISSS608-Liu Chih Yuan",
    "section": "",
    "text": "Take Home Ex01 added"
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "The 2024 dataset from Singapore’ Department of Statistics provides resident population data by planning area, subzone, age, and sex.\n\n\nTo perform structured exploratory data analysis to uncover insights on demographic distribution across regions.\n\n\n\n\n\n\n\npacman::p_load(tidyverse, ggrepel, ggthemes, patchwork, ggridges, scales)\n\nThe R packages used in this EDA are as follows:\n\ntidyverse core R package for data science (contains essential packages such as ggplot2)\nggrepel for ggplot2 to repel overlapping text labels\nggthemes extra ggplot themes\npatchwork combine ggplot\nggridges for ridgeline plots\nscales customer number formatting\n\n\n\n\n\ndf &lt;- read.csv(\"data/respopagesex2024.csv\")\n\n\ncommon_theme &lt;- theme_minimal(base_size = 16) +\n  theme(\n    axis.text = element_text(size = 18),\n    axis.title = element_text(size = 20),\n    plot.title = element_text(size = 18, face = \"bold\"),\n    legend.text = element_text(size = 17),\n    legend.title = element_text(size = 16)\n  )\n\n\n\n\nglimpse(df)\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", …\n$ Sex  &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  &lt;int&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time &lt;int&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n\ncolSums(is.na(df))\n\n  PA   SZ  Age  Sex  Pop Time \n   0    0    0    0    0    0 \n\n\n\n\n\n\n\n\n\nstr(df)\n\n'data.frame':   60424 obs. of  6 variables:\n $ PA  : chr  \"Ang Mo Kio\" \"Ang Mo Kio\" \"Ang Mo Kio\" \"Ang Mo Kio\" ...\n $ SZ  : chr  \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" ...\n $ Age : chr  \"0\" \"0\" \"1\" \"1\" ...\n $ Sex : chr  \"Males\" \"Females\" \"Males\" \"Females\" ...\n $ Pop : int  10 10 10 10 10 10 10 10 30 10 ...\n $ Time: int  2024 2024 2024 2024 2024 2024 2024 2024 2024 2024 ...\n\n\nWe see column Age is “chr” (character) instead of numeric, let’s check why by finding the unique value of column Age\n\nsort(unique(df$Age))\n\n [1] \"0\"           \"1\"           \"10\"          \"11\"          \"12\"         \n [6] \"13\"          \"14\"          \"15\"          \"16\"          \"17\"         \n[11] \"18\"          \"19\"          \"2\"           \"20\"          \"21\"         \n[16] \"22\"          \"23\"          \"24\"          \"25\"          \"26\"         \n[21] \"27\"          \"28\"          \"29\"          \"3\"           \"30\"         \n[26] \"31\"          \"32\"          \"33\"          \"34\"          \"35\"         \n[31] \"36\"          \"37\"          \"38\"          \"39\"          \"4\"          \n[36] \"40\"          \"41\"          \"42\"          \"43\"          \"44\"         \n[41] \"45\"          \"46\"          \"47\"          \"48\"          \"49\"         \n[46] \"5\"           \"50\"          \"51\"          \"52\"          \"53\"         \n[51] \"54\"          \"55\"          \"56\"          \"57\"          \"58\"         \n[56] \"59\"          \"6\"           \"60\"          \"61\"          \"62\"         \n[61] \"63\"          \"64\"          \"65\"          \"66\"          \"67\"         \n[66] \"68\"          \"69\"          \"7\"           \"70\"          \"71\"         \n[71] \"72\"          \"73\"          \"74\"          \"75\"          \"76\"         \n[76] \"77\"          \"78\"          \"79\"          \"8\"           \"80\"         \n[81] \"81\"          \"82\"          \"83\"          \"84\"          \"85\"         \n[86] \"86\"          \"87\"          \"88\"          \"89\"          \"9\"          \n[91] \"90_and_Over\"\n\n\nHere most likely it’s the 90_and_over causing it to be a str not int\n\n\n\n\ndf &lt;- df %&gt;%\n  mutate(\n    AgeNum = suppressWarnings(\n      ifelse(Age == \"90_and_Over\", 90, as.numeric(Age))\n    )\n  )\n\nSince we observed people over 90 years old are categorized 90_and_above instead of actual numbers, for the ease of plotting we hereby create a new column AgeNum\n\n\n\n\ndf &lt;- df %&gt;%\n  mutate(\n    AgeGroup = case_when(\n      AgeNum &lt;= 12 ~ \"Child\",\n      AgeNum &lt;= 24 ~ \"Youth\",\n      AgeNum &lt;= 64 ~ \"Adult\",\n      TRUE ~ \"Senior\"\n    )\n  )\n\nWe create a new column AgeGroup for future EDA purposes\n\nstr(df)\n\n'data.frame':   60424 obs. of  8 variables:\n $ PA      : chr  \"Ang Mo Kio\" \"Ang Mo Kio\" \"Ang Mo Kio\" \"Ang Mo Kio\" ...\n $ SZ      : chr  \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" ...\n $ Age     : chr  \"0\" \"0\" \"1\" \"1\" ...\n $ Sex     : chr  \"Males\" \"Females\" \"Males\" \"Females\" ...\n $ Pop     : int  10 10 10 10 10 10 10 10 30 10 ...\n $ Time    : int  2024 2024 2024 2024 2024 2024 2024 2024 2024 2024 ...\n $ AgeNum  : num  0 0 1 1 2 2 3 3 4 4 ...\n $ AgeGroup: chr  \"Child\" \"Child\" \"Child\" \"Child\" ...\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(df, aes(x = AgeNum, y = Pop)) +\n  stat_summary(fun = sum, geom = \"bar\", fill = \"steelblue\") +\n  labs(title = \"Total Population by Age\", x = \"Age\", y = \"Population\") +\n  scale_y_continuous(labels = label_comma()) +\n  common_theme\n\np2 &lt;- df %&gt;%\n  group_by(AgeGroup) %&gt;%\n  summarise(Pop = sum(Pop)) %&gt;%\n  ggplot(aes(x = AgeGroup, y = Pop, fill = AgeGroup)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Population by Age Group\", y = \"Population\") +\n  scale_y_continuous(labels = label_comma()) +\n  common_theme\n\n(p1 / p2) + plot_layout(heights = c(1.2, 1))\n\n\n\n\n\n\n\n\nInsights:\n\nMost residents fall between ages 25 to 54\nYouth population is shrinking, suggesting long-term labor sustainability issues\nSenior population (65+) rising, indicating growing need for eldercare and aging population\n\n\n\n\n\np3 &lt;- ggplot(df, aes(x = Sex, y = Pop, fill = Sex)) +\n  stat_summary(fun = sum, geom = \"bar\") +\n  labs(title = \"Population by Gender\", x = NULL, y = \"Population\") +\n  scale_y_continuous(labels = label_comma()) +\n  common_theme\n\np4 &lt;- df %&gt;%\n  group_by(Sex, AgeGroup) %&gt;%\n  summarise(Pop = sum(Pop)) %&gt;%\n  ggplot(aes(x = AgeGroup, y = Pop, fill = Sex)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Gender Distribution by Age Group\", y = \"Population\") +\n  scale_y_continuous(labels = label_comma()) +\n  common_theme\n\n(p3 / p4) + plot_layout(heights = c(1.2, 1))\n\n\n\n\n\n\n\n\nInsights:\n\nGender balance is nearly equal overall\nFemale dominates in the senior age group, likely due to higher life expectancy\n\n\n\n\n\ndf_pyramid &lt;- df %&gt;%\n  filter(AgeNum &lt;= 90) %&gt;%\n  mutate(Pop = ifelse(Sex == \"Males\", -Pop, Pop))\n\np6 &lt;- ggplot(df_pyramid, aes(x = AgeNum, y = Pop, fill = Sex)) +\n  geom_col(width = 1) +\n  coord_flip() +\n  labs(title = \"Population Pyramid\", x = \"Age\", y = \"Population\") +\n  scale_y_continuous(labels = label_comma()) +\n  common_theme\n\np7 &lt;- df %&gt;%\n  group_by(Sex, AgeGroup) %&gt;%\n  summarise(Pop = sum(Pop)) %&gt;%\n  ggplot(aes(x = AgeGroup, y = Pop, fill = Sex)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Age Group Distribution by Gender\", y = \"Population\") +\n  scale_y_continuous(labels = label_comma()) +\n  common_theme\n\n(p6 / p7) + plot_layout(heights = c(1.3, 1))\n\n\n\n\n\n\n\n\nInsights:\n\nPyramid shows narrowing base wider top, typical for aging societies\nAdults dominate across both genders, seniors are the second largest group\n\n\n\n\n\n\nSingapore faces a demographic shift towards aging, requiring proactive planning\nUneven population spread across subzones and planning ares calls for smart urban development\nThis EDA provides clear insights and serves as baseline for policy design, urban planning, and future modelling",
    "crumbs": [
      "Home",
      "Take-Home Exercise",
      "Take-Home Ex01"
    ]
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#overview",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#overview",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "The 2024 dataset from Singapore’ Department of Statistics provides resident population data by planning area, subzone, age, and sex.\n\n\nTo perform structured exploratory data analysis to uncover insights on demographic distribution across regions.",
    "crumbs": [
      "Home",
      "Take-Home Exercise",
      "Take-Home Ex01"
    ]
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#getting-started",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#getting-started",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "pacman::p_load(tidyverse, ggrepel, ggthemes, patchwork, ggridges, scales)\n\nThe R packages used in this EDA are as follows:\n\ntidyverse core R package for data science (contains essential packages such as ggplot2)\nggrepel for ggplot2 to repel overlapping text labels\nggthemes extra ggplot themes\npatchwork combine ggplot\nggridges for ridgeline plots\nscales customer number formatting\n\n\n\n\n\ndf &lt;- read.csv(\"data/respopagesex2024.csv\")\n\n\ncommon_theme &lt;- theme_minimal(base_size = 16) +\n  theme(\n    axis.text = element_text(size = 18),\n    axis.title = element_text(size = 20),\n    plot.title = element_text(size = 18, face = \"bold\"),\n    legend.text = element_text(size = 17),\n    legend.title = element_text(size = 16)\n  )\n\n\n\n\nglimpse(df)\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", …\n$ Sex  &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  &lt;int&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time &lt;int&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n\ncolSums(is.na(df))\n\n  PA   SZ  Age  Sex  Pop Time \n   0    0    0    0    0    0 \n\n\n\n\n\n\n\n\n\nstr(df)\n\n'data.frame':   60424 obs. of  6 variables:\n $ PA  : chr  \"Ang Mo Kio\" \"Ang Mo Kio\" \"Ang Mo Kio\" \"Ang Mo Kio\" ...\n $ SZ  : chr  \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" ...\n $ Age : chr  \"0\" \"0\" \"1\" \"1\" ...\n $ Sex : chr  \"Males\" \"Females\" \"Males\" \"Females\" ...\n $ Pop : int  10 10 10 10 10 10 10 10 30 10 ...\n $ Time: int  2024 2024 2024 2024 2024 2024 2024 2024 2024 2024 ...\n\n\nWe see column Age is “chr” (character) instead of numeric, let’s check why by finding the unique value of column Age\n\nsort(unique(df$Age))\n\n [1] \"0\"           \"1\"           \"10\"          \"11\"          \"12\"         \n [6] \"13\"          \"14\"          \"15\"          \"16\"          \"17\"         \n[11] \"18\"          \"19\"          \"2\"           \"20\"          \"21\"         \n[16] \"22\"          \"23\"          \"24\"          \"25\"          \"26\"         \n[21] \"27\"          \"28\"          \"29\"          \"3\"           \"30\"         \n[26] \"31\"          \"32\"          \"33\"          \"34\"          \"35\"         \n[31] \"36\"          \"37\"          \"38\"          \"39\"          \"4\"          \n[36] \"40\"          \"41\"          \"42\"          \"43\"          \"44\"         \n[41] \"45\"          \"46\"          \"47\"          \"48\"          \"49\"         \n[46] \"5\"           \"50\"          \"51\"          \"52\"          \"53\"         \n[51] \"54\"          \"55\"          \"56\"          \"57\"          \"58\"         \n[56] \"59\"          \"6\"           \"60\"          \"61\"          \"62\"         \n[61] \"63\"          \"64\"          \"65\"          \"66\"          \"67\"         \n[66] \"68\"          \"69\"          \"7\"           \"70\"          \"71\"         \n[71] \"72\"          \"73\"          \"74\"          \"75\"          \"76\"         \n[76] \"77\"          \"78\"          \"79\"          \"8\"           \"80\"         \n[81] \"81\"          \"82\"          \"83\"          \"84\"          \"85\"         \n[86] \"86\"          \"87\"          \"88\"          \"89\"          \"9\"          \n[91] \"90_and_Over\"\n\n\nHere most likely it’s the 90_and_over causing it to be a str not int\n\n\n\n\ndf &lt;- df %&gt;%\n  mutate(\n    AgeNum = suppressWarnings(\n      ifelse(Age == \"90_and_Over\", 90, as.numeric(Age))\n    )\n  )\n\nSince we observed people over 90 years old are categorized 90_and_above instead of actual numbers, for the ease of plotting we hereby create a new column AgeNum\n\n\n\n\ndf &lt;- df %&gt;%\n  mutate(\n    AgeGroup = case_when(\n      AgeNum &lt;= 12 ~ \"Child\",\n      AgeNum &lt;= 24 ~ \"Youth\",\n      AgeNum &lt;= 64 ~ \"Adult\",\n      TRUE ~ \"Senior\"\n    )\n  )\n\nWe create a new column AgeGroup for future EDA purposes\n\nstr(df)\n\n'data.frame':   60424 obs. of  8 variables:\n $ PA      : chr  \"Ang Mo Kio\" \"Ang Mo Kio\" \"Ang Mo Kio\" \"Ang Mo Kio\" ...\n $ SZ      : chr  \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" \"Ang Mo Kio Town Centre\" ...\n $ Age     : chr  \"0\" \"0\" \"1\" \"1\" ...\n $ Sex     : chr  \"Males\" \"Females\" \"Males\" \"Females\" ...\n $ Pop     : int  10 10 10 10 10 10 10 10 30 10 ...\n $ Time    : int  2024 2024 2024 2024 2024 2024 2024 2024 2024 2024 ...\n $ AgeNum  : num  0 0 1 1 2 2 3 3 4 4 ...\n $ AgeGroup: chr  \"Child\" \"Child\" \"Child\" \"Child\" ...",
    "crumbs": [
      "Home",
      "Take-Home Exercise",
      "Take-Home Ex01"
    ]
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#exploratory-data-analysis",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#exploratory-data-analysis",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "p1 &lt;- ggplot(df, aes(x = AgeNum, y = Pop)) +\n  stat_summary(fun = sum, geom = \"bar\", fill = \"steelblue\") +\n  labs(title = \"Total Population by Age\", x = \"Age\", y = \"Population\") +\n  scale_y_continuous(labels = label_comma()) +\n  common_theme\n\np2 &lt;- df %&gt;%\n  group_by(AgeGroup) %&gt;%\n  summarise(Pop = sum(Pop)) %&gt;%\n  ggplot(aes(x = AgeGroup, y = Pop, fill = AgeGroup)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Population by Age Group\", y = \"Population\") +\n  scale_y_continuous(labels = label_comma()) +\n  common_theme\n\n(p1 / p2) + plot_layout(heights = c(1.2, 1))\n\n\n\n\n\n\n\n\nInsights:\n\nMost residents fall between ages 25 to 54\nYouth population is shrinking, suggesting long-term labor sustainability issues\nSenior population (65+) rising, indicating growing need for eldercare and aging population\n\n\n\n\n\np3 &lt;- ggplot(df, aes(x = Sex, y = Pop, fill = Sex)) +\n  stat_summary(fun = sum, geom = \"bar\") +\n  labs(title = \"Population by Gender\", x = NULL, y = \"Population\") +\n  scale_y_continuous(labels = label_comma()) +\n  common_theme\n\np4 &lt;- df %&gt;%\n  group_by(Sex, AgeGroup) %&gt;%\n  summarise(Pop = sum(Pop)) %&gt;%\n  ggplot(aes(x = AgeGroup, y = Pop, fill = Sex)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Gender Distribution by Age Group\", y = \"Population\") +\n  scale_y_continuous(labels = label_comma()) +\n  common_theme\n\n(p3 / p4) + plot_layout(heights = c(1.2, 1))\n\n\n\n\n\n\n\n\nInsights:\n\nGender balance is nearly equal overall\nFemale dominates in the senior age group, likely due to higher life expectancy\n\n\n\n\n\ndf_pyramid &lt;- df %&gt;%\n  filter(AgeNum &lt;= 90) %&gt;%\n  mutate(Pop = ifelse(Sex == \"Males\", -Pop, Pop))\n\np6 &lt;- ggplot(df_pyramid, aes(x = AgeNum, y = Pop, fill = Sex)) +\n  geom_col(width = 1) +\n  coord_flip() +\n  labs(title = \"Population Pyramid\", x = \"Age\", y = \"Population\") +\n  scale_y_continuous(labels = label_comma()) +\n  common_theme\n\np7 &lt;- df %&gt;%\n  group_by(Sex, AgeGroup) %&gt;%\n  summarise(Pop = sum(Pop)) %&gt;%\n  ggplot(aes(x = AgeGroup, y = Pop, fill = Sex)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Age Group Distribution by Gender\", y = \"Population\") +\n  scale_y_continuous(labels = label_comma()) +\n  common_theme\n\n(p6 / p7) + plot_layout(heights = c(1.3, 1))\n\n\n\n\n\n\n\n\nInsights:\n\nPyramid shows narrowing base wider top, typical for aging societies\nAdults dominate across both genders, seniors are the second largest group",
    "crumbs": [
      "Home",
      "Take-Home Exercise",
      "Take-Home Ex01"
    ]
  },
  {
    "objectID": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#conculsion",
    "href": "TakeHome_Ex/TakeHome_Ex01/TakeHome_Ex01.html#conculsion",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "Singapore faces a demographic shift towards aging, requiring proactive planning\nUneven population spread across subzones and planning ares calls for smart urban development\nThis EDA provides clear insights and serves as baseline for policy design, urban planning, and future modelling",
    "crumbs": [
      "Home",
      "Take-Home Exercise",
      "Take-Home Ex01"
    ]
  }
]