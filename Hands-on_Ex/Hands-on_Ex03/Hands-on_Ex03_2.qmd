---
title: "Hands-on_Ex03"
author: "Liu Chih Yuan"
date: "April 29, 2025"
date-modified: "last-modified"
---

# Programming Animated Statistical Graphics with R

By using `gganimate` and `plotly r` packages, we can create animated data visualization. At the same time, you will also learn how to (i) reshape data by using `tidyr` package, and (ii) process, wrangle and transform data by using `dplyr` package.

## Concepts

When creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon.

<img src="image/image1.jpg" width="600"/>

## Terminology

Animated graphs are nice, but it does not apply to all use cases. If you are conducting EDA, animated graphs might not be worth the time. But if you are giving a presentation, a few well-placed animated graphs can help audience better understand the topic and figures

1.  **Frame:** in a animated graph, each frame represents a different point in time or category, when the frame changes the data points on graph are updates as well

2.  **Animation Attributes:** settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.

## Loading the packages

1.  `readxl` makes it easy to get data out from Excel into R
2.  `plotly` library for plotting interactive statistical graphics
3.  `gganimate` ggplot extension for creating animated statistical graphs
4.  `gifski` converts video frames to GIF animations
5.  `gapminder` An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.
6.  `tidyverse` a set of modern R packages for data science, analytics etc

```{r}
pacman::p_load( readxl, plotly, gganimate, gifski, gapminder, tidyverse)
```

## Importing Data

```{r}
col <- c("Country", "Continent")
globalPop <- read_xls("data/GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate_each_(funs(factor(.)), col) %>%
  mutate(Year = as.integer(Year))
```

::: {.callout-note title="Things to learn from the code chunk above"}
-   `read_xls()` of **readxl** package is used to import the Excel worksheet.
-   `mutate_each_()` of **dplyr** package is used to convert all character data type into factor.
-   `mutate` of **dplyr** package is used to convert data values of Year field into integer.
:::

Unfortunately, `mutate_each_()` was deprecated in dplyr 0.7.0. and `funs()` was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using [`mutate_at()`](https://r4va.netlify.app/chap04) as shown in the code chunk below.

```{r}
col <- c("Country", "Continent")
globalPop <- read_xls("data/GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate_at(col, as.factor) %>%
  mutate(Year = as.integer(Year))
```

-   note the %\>% means *"take the result of the previous step and pass to the next function" it is a pipe operator*

Instead of using `mutate_at()`, [`across()`](https://dplyr.tidyverse.org/reference/across.html) can be used to derive the same outputs

```{r}
col <- c("Country", "Continent")
globalPop <- read_xls("data/GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate(across(col, as.factor)) %>%
  mutate(Year = as.integer(Year))
```

## gganimate method

[**gganimate**](https://gganimate.com/) extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.

-   `transition_*()` defines how the data should be spread out and how it relates to itself across time.

-   `view_*()` defines how the positional scales should change along the animation.

-   `shadow_*()` defines how data from other points in time should be presented in the given point in time.

-   `enter_*()/exit_*()` defines how new data should appear and how old data should disappear during the course of the animation.

-   `ease_aes()` defines how different aesthetics should be eased during transitions.

### Building static population bubble plot

```{r}
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') 
```

### Building animated bubble plot

-   [`transition_time()`](https://gganimate.com/reference/transition_time.html) of **gganimate** is used to create transition through distinct states in time (i.e. Year).

-   `ease_aes()` is used to control easing of aesthetics. The default is `linear`. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.

```{r}
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') +
  transition_time(Year) +       
  ease_aes('linear')          

```

### `ggplotly()` method for animated bubble

```{r}
gg <- ggplot(globalPop, 
       aes(x = Old, 
           y = Young, 
           size = Population, 
           colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young')

ggplotly(gg)
```

::: {.callout-note title="Things to learn from the code chunk above"}
-   Appropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.
-   `ggplotly()` is then used to convert the R graphic object into an animated svg object.
:::

Notice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.

```{r}
gg <- ggplot(globalPop, 
       aes(x = Old, 
           y = Young, 
           size = Population, 
           colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young') + 
  theme(legend.position='none')

ggplotly(gg)
```

### `plot_ly()` method for animated bubble

```{r}
bp <- globalPop %>%
  plot_ly(x = ~Old, 
          y = ~Young, 
          size = ~Population, 
          color = ~Continent,
          sizes = c(2, 100),
          frame = ~Year, 
          text = ~Country, 
          hoverinfo = "text",
          type = 'scatter',
          mode = 'markers'
          ) %>%
  layout(showlegend = FALSE)
bp
```
